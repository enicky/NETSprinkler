// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NETSprinkler.Common.DbContext;

#nullable disable

namespace NETSprinkler.Common.Migrations
{
    [DbContext(typeof(SprinklerDbContext))]
    [Migration("20230926181700_AddedPortToValves")]
    partial class AddedPortToValves
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NETSprinkler.Models.Entity.Schedule.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cron")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DaysToRun")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EndHour")
                        .HasColumnType("int");

                    b.Property<int>("EndMinute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SprinklerValveId")
                        .HasColumnType("int");

                    b.Property<int>("StartHour")
                        .HasColumnType("int");

                    b.Property<int>("StartMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SprinklerValveId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("NETSprinkler.Models.Entity.Status.ValveStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<int?>("SprinklerValveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SprinklerValveId")
                        .IsUnique()
                        .HasFilter("[SprinklerValveId] IS NOT NULL");

                    b.ToTable("ValveStatus");
                });

            modelBuilder.Entity("NETSprinkler.Models.Entity.Valve.SprinklerValve", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SprinklerValves");
                });

            modelBuilder.Entity("NETSprinkler.Models.Entity.Schedule.Schedule", b =>
                {
                    b.HasOne("NETSprinkler.Models.Entity.Valve.SprinklerValve", "Sprinkler")
                        .WithMany()
                        .HasForeignKey("SprinklerValveId");

                    b.Navigation("Sprinkler");
                });

            modelBuilder.Entity("NETSprinkler.Models.Entity.Status.ValveStatus", b =>
                {
                    b.HasOne("NETSprinkler.Models.Entity.Valve.SprinklerValve", "SprinklerValve")
                        .WithOne("Status")
                        .HasForeignKey("NETSprinkler.Models.Entity.Status.ValveStatus", "SprinklerValveId");

                    b.Navigation("SprinklerValve");
                });

            modelBuilder.Entity("NETSprinkler.Models.Entity.Valve.SprinklerValve", b =>
                {
                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
